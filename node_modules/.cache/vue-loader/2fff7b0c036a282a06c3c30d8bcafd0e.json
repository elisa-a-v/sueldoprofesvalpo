{"remainingRequest":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/elisa/PycharmProjects/planillaflask/client/src/components/Data.vue?vue&type=template&id=40b9b6da&","dependencies":[{"path":"/home/elisa/PycharmProjects/planillaflask/client/src/components/Data.vue","mtime":1595129813443},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}