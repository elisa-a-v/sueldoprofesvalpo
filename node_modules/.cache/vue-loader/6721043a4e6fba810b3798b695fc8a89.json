{"remainingRequest":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/elisa/PycharmProjects/planillaflask/client/src/components/Data.vue?vue&type=template&id=40b9b6da&scoped=true&","dependencies":[{"path":"/home/elisa/PycharmProjects/planillaflask/client/src/components/Data.vue","mtime":1594875223742},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elisa/PycharmProjects/planillaflask/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICBfYygiYnIiKSwKICAgIF92bS5fdigiRGVwYXJ0YW1lbnRvIGRlIEVkdWNhY2nDs24gLSBDb211bmFsIFZhbHBhcmHDrXNvICIpLAogICAgX2MoImJyIiksCiAgICBfdm0uX3YoIkNvbGVnaW8gZGUgUHJvZmVzb3JhcyB5IFByb2Zlc29yZXMgIiksCiAgICBfdm0uX20oMCksCiAgICBfdm0uX20oMSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KCJWYWxvciBob3JhOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0udmFsb3JIb3JhLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInZhbG9ySG9yYSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS52YWxvckhvcmEgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGRvbVByb3BzOiB7IHZhbHVlOiAxNDQwMyB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkVuc2XDsWFuemEgYsOhc2ljYSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygib3B0aW9uIiwgeyBkb21Qcm9wczogeyB2YWx1ZTogMTUxNTUgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJFbnNlw7FhbnphIG1lZGlhIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJiciIpLAogICAgX2MoImRpdiIsIFsKICAgICAgX2MoImxhYmVsIiwgWwogICAgICAgIF92bS5fdigiSG9yYXMgcG9yIHN1YnZlbmNpw7NuIHJlZ3VsYXI6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ob3Jhc1JlZ3VsYXIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiaG9yYXNSZWd1bGFyIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgX3ZtLmhvcmFzUmVndWxhciA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIF92bS5fbChfdm0uaG9yYXNQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KCJIb3JhcyBkZSByZWVtcGxhem86ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ob3Jhc1JlZW1wbGF6bywKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJob3Jhc1JlZW1wbGF6byIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5ob3Jhc1JlZW1wbGF6byA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIF92bS5fbChfdm0uaG9yYXNQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KCJIb3JhcyBTRVA6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ob3Jhc1NFUCwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJob3Jhc1NFUCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5ob3Jhc1NFUCA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIF92bS5fbChfdm0uaG9yYXNQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KCJIb3JhcyBQSUU6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ob3Jhc1BJRSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJob3Jhc1BJRSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5ob3Jhc1BJRSA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIF92bS5fbChfdm0uaG9yYXNQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX2MoImIiLCBbX3ZtLl92KCJIb3JhcyB0b3RhbCBjb250cmF0bzoiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgIiArCiAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICBfdm0uaG9yYXNSZWd1bGFyICsKICAgICAgICAgICAgICAgIF92bS5ob3Jhc1JlZW1wbGF6byArCiAgICAgICAgICAgICAgICBfdm0uaG9yYXNTRVAgKwogICAgICAgICAgICAgICAgX3ZtLmhvcmFzUElFCiAgICAgICAgICAgICkgKwogICAgICAgICAgICAiICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJiciIpLAogICAgX2MoImRpdiIsIFsKICAgICAgX2MoImxhYmVsIiwgWwogICAgICAgIF92bS5fdigiQmllbmlvcyByZWNvbm9jaWRvcyBwb3IgQ09STVVWQUw6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5iaWVuaW9zQ29ybXV2YWwsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiYmllbmlvc0Nvcm11dmFsIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgX3ZtLmJpZW5pb3NDb3JtdXZhbCA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIF92bS5fbChfdm0uYmllbmlvc1Bvc2libGVzLCBmdW5jdGlvbihpKSB7CiAgICAgICAgICAgIHJldHVybiBfYygib3B0aW9uIiwgeyBrZXk6IGksIGRvbVByb3BzOiB7IHZhbHVlOiBpIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoaSkpCiAgICAgICAgICAgIF0pCiAgICAgICAgICB9KSwKICAgICAgICAgIDAKICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCBbCiAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICBfdm0uX3YoIkJpZW5pb3MgcmVjb25vY2lkb3MgcG9yIENQRUlQOiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJzZWxlY3QiLAogICAgICAgICAgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uYmllbmlvc0NwZWlwLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImJpZW5pb3NDcGVpcCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5iaWVuaW9zQ3BlaXAgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlCiAgICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbAogICAgICAgICAgICAgICAgICA6ICQkc2VsZWN0ZWRWYWxbMF0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBfdm0uX2woX3ZtLmJpZW5pb3NQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KCJUcmFtbzogIiksCiAgICAgICAgX2MoCiAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnRyYW1vLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRyYW1vIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyCiAgICAgICAgICAgICAgICAgIC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucywgZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obykgewogICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgX3ZtLnRyYW1vID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZQogICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgX3ZtLl9sKF92bS50cmFtb3NQb3NpYmxlcywgZnVuY3Rpb24oaSkgewogICAgICAgICAgICByZXR1cm4gX2MoIm9wdGlvbiIsIHsga2V5OiBpLCBkb21Qcm9wczogeyB2YWx1ZTogaSB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKGkpKQogICAgICAgICAgICBdKQogICAgICAgICAgfSksCiAgICAgICAgICAwCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygiYnIiKSwKICAgIF9jKCJkaXYiLCBbCiAgICAgIF9jKCJsYWJlbCIsIFsKICAgICAgICBfdm0uX3YoIlTDrXR1bG8gcGFyYSBCUlA6ICIpLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5uaXZlbEJSUCwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJuaXZlbEJSUCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5uaXZlbEJSUCA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgZG9tUHJvcHM6IHsgdmFsdWU6IDAgfSB9LCBbX3ZtLl92KCJTaW4gdMOtdHVsbyIpXSksCiAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGRvbVByb3BzOiB7IHZhbHVlOiAyNTMwNzYgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb24gdMOtdHVsbywgc2luIG1lbmNpw7NuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGRvbVByb3BzOiB7IHZhbHVlOiAzMzc0MzYgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJDb24gdMOtdHVsbywgY29uIG1lbmNpw7NuIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJiciIpLAogICAgX2MoImRpdiIsIFsKICAgICAgX2MoImxhYmVsIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUcmFiYWphIGVuIHVuIGVzdGFibGVjaW1pZW50byBjb24gNjAlIGRlIGVzdHVkaWFudGVzIHByaW9yaXRhcmlvcyBvIG3DoXM6ICIKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgInNlbGVjdCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcmlvcml0YXJpbzYwLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInByaW9yaXRhcmlvNjAiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIKICAgICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWUKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBfdm0ucHJpb3JpdGFyaW82MCA9ICRldmVudC50YXJnZXQubXVsdGlwbGUKICAgICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsCiAgICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgZG9tUHJvcHM6IHsgdmFsdWU6IDAgfSB9LCBbX3ZtLl92KCJObyIpXSksCiAgICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGRvbVByb3BzOiB7IHZhbHVlOiAxIH0gfSwgW192bS5fdigiU8OtIildKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImJyIiksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygibGFiZWwiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRyYWJhamEgZW4gdW4gZXN0YWJsZWNpbWllbnRvIGNvbiA4MCUgZGUgZXN0dWRpYW50ZXMgcHJpb3JpdGFyaW9zIG8gbcOhczogIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAic2VsZWN0IiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnByaW9yaXRhcmlvODAsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicHJpb3JpdGFyaW84MCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHZhciAkJHNlbGVjdGVkVmFsID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcgogICAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZAogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gIl92YWx1ZSIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWwKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF92bS5wcmlvcml0YXJpbzgwID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZQogICAgICAgICAgICAgICAgICA/ICQkc2VsZWN0ZWRWYWwKICAgICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygib3B0aW9uIiwgeyBkb21Qcm9wczogeyB2YWx1ZTogMCB9IH0sIFtfdm0uX3YoIk5vIildKSwKICAgICAgICAgICAgX2MoIm9wdGlvbiIsIHsgZG9tUHJvcHM6IHsgdmFsdWU6IDEgfSB9LCBbX3ZtLl92KCJTw60iKV0pCiAgICAgICAgICBdCiAgICAgICAgKQogICAgICBdKQogICAgXSksCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1iLTMiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImItdG9nZ2xlIiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1iLXRvZ2dsZS5teS1jb2xsYXBzZSIsCiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiB7ICJteS1jb2xsYXBzZSI6IHRydWUgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJDYWxjdWxhciBTdWVsZG8iKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImItY29sbGFwc2UiLAogICAgICAgICAgeyBhdHRyczogeyBpZDogIm15LWNvbGxhcHNlIiB9IH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJiLWNhcmQiLCB7IGF0dHJzOiB7IHRpdGxlOiAiUGxhbmlsbGEgZGUgc3VlbGRvIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBIZWxsbyB3b3JsZCEgIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tc3VjY2VzcyBidG4tc20iLAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiwgb25jbGljazogIm9uUmVzZXQodGhpcykiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIgTGltcGlhciBmb3JtdWxhcmlvICIpXQogICAgICAgICkKICAgICAgXSwKICAgICAgMQogICAgKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCBbCiAgICAgIF9jKCJoMSIsIFtfYygiYnIiKSwgX3ZtLl92KCJDYWxjdWxhZG9yYSBkZSBzdWVsZG8gIildKSwKICAgICAgX2MoImg1IiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSGVycmFtaWVudGEgcGFyYSBwcm9mZXNvcmFzIHkgcHJvZmVzb3JlcyBxdWUgdHJhYmFqYW4gZW4gZXN0YWJsZWNpbWllbnRvcyBtdW5pY2lwYWxlcyBkZSBsYSBjb211bmEgZGUgVmFscGFyYcOtc28uICIKICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgWwogICAgICBfYygiaDQiLCBbX2MoImJyIiksIF92bS5fdigiSU5TVFJVQ0NJT05FUzogIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICcgSW5ncmVzZSBsYSBpbmZvcm1hY2nDs24gcXVlIHNlIHNvbGljaXRhIGVuIGVsIGZvcm11bGFyaW8gYSBjb250aW51YWNpw7NuLiBDdWFuZG8gaGF5YSBpbmdyZXNhZG8gdG9kYSBsYSBpbmZvcm1hY2nDs24gY29ycmVjdGFtZW50ZSwgcHJlc2lvbmUgZWwgYm90w7NuICJDYWxjdWxhciBTdWVsZG8iIHkgdmVyw6EgZWwgZGV0YWxsZSBwb3IgYXNpZ25hY2nDs24gcXVlIHVzdGVkIGRlYmVyw61hIHJlY2liaXIgY2FkYSBtZXMuICcKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF92bS5fdigKICAgICAgICAiRXNwZXJhbW9zIHF1ZSBlc3RhIGhlcnJhbWllbnRhIGxlIHNlYSBkZSB1dGlsaWRhZCBwYXJhIHJldmlzYXIgc3UgY29saWxsYSBkZSBzdWVsZG8uICIKICAgICAgKSwKICAgICAgX2MoImJyIiksCiAgICAgIF9jKCJiciIpCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}